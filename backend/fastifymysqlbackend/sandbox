Request {
  id: 'req-a',
  params: {},
  raw: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 
},
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      constructed: true,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: [StringDecoder],
      encoding: 'utf8',
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],       
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 79,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 122953,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 220,
        [Symbol(triggerId)]: 217
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Content-Type',
      'application/json',
      'User-Agent',
      'PostmanRuntime/7.32.3',
      'Accept',
      '*/*',
      'Postman-Token',
      '65c7b9ef-ffcf-4fb2-953d-dd46e060604d',
      'Host',
      'localhost:3000',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Length',
      '88'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: undefined,
    aborted: false,
    upgrade: false,
    url: '/api/posts',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],       
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 79,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 122953,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 220,
        [Symbol(triggerId)]: 217
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: true,
    _dumped: false,
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      'content-type': 'application/json',
      'user-agent': 'PostmanRuntime/7.32.3',
      accept: '*/*',
      'postman-token': '65c7b9ef-ffcf-4fb2-953d-dd46e060604d',
      host: 'localhost:3000',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-length': '88'
    },
    [Symbol(kHeadersCount)]: 16,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0
  },
  query: {},
  log: {
    child: [Function (anonymous)],
    [Symbol(fastify.disableRequestLogging)]: false
  },
  body: {
    title: 'this is a test title post',
    body: 'this is a test title body'
  },
  [Symbol(fastify.context)]: Context {
    schema: undefined,
    handler: [Function: bound ],
    Reply: [Function: Reply] {
      props: [],
      buildReply: [Function: buildReply],
      setupResponseListeners: [Function: setupResponseListeners]
    },
    Request: [Function: Request] {
      props: [],
      buildRequest: [Function: buildRequest]
    },
    contentTypeParser: ContentTypeParser {
      customParsers: [Map],
      parserList: [Array],
      parserRegExpList: [],
      cache: [FifoObject],
      [Symbol(fastify.defaultJSONParse)]: [Function: defaultJsonParser]
    },
    onRequest: null,
    onSend: null,
    onError: null,
    onTimeout: null,
    preHandler: null,
    onResponse: null,
    preSerialization: null,
    onRequestAbort: null,
    config: { url: '/api/posts', method: 'POST' },
    errorHandler: {
      func: [Function: defaultErrorHandler],
      toJSON: [Function: toJSON]
    },
    requestIdLogLabel: 'reqId',
    childLoggerFactory: [Function: defaultChildLoggerFactory],
    _middie: null,
    _parserOptions: { limit: null },
    exposeHeadRoute: true,
    prefixTrailingSlash: 'both',
    logLevel: '',
    logSerializers: undefined,
    attachValidation: false,
    schemaErrorFormatter: [Function: defaultSchemaErrorFormatter],
    validatorCompiler: null,
    serializerCompiler: null,
    server: <ref *1> {
      routing: [Function: preRouting],
      getDefaultRoute: [Function: bound getDefaultRoute],    
      setDefaultRoute: [Function: bound setDefaultRoute],    
      delete: [Function: _delete],
      get: [Function: _get],
      head: [Function: _head],
      patch: [Function: _patch],
      post: [Function: _post],
      put: [Function: _put],
      options: [Function: _options],
      all: [Function: _all],
      route: [Function: _route],
      hasRoute: [Function: _route],
      log: [Object],
      withTypeProvider: [Function: withTypeProvider],        
      addHook: [Function: addHook],
      addSchema: [Function: addSchema],
      getSchema: [Function: bound getSchema],
      getSchemas: [Function: bound getSchemas],
      setValidatorCompiler: [Function: setValidatorCompiler],      setSerializerCompiler: [Function: setSerializerCompiler],
      setSchemaController: [Function: setSchemaController],  
      setReplySerializer: [Function: setReplySerializer],    
      setSchemaErrorFormatter: [Function: setSchemaErrorFormatter],
      addContentTypeParser: [Function: addContentTypeParser],      hasContentTypeParser: [Function: hasContentTypeParser],      getDefaultJsonParser: [Function: getDefaultJsonParser],      defaultTextParser: [Function: defaultPlainTextParser], 
      removeContentTypeParser: [Function: removeContentTypeParser],
      removeAllContentTypeParsers: [Function: removeAllContentTypeParsers],
      register: [Function (anonymous)],
      after: [Function (anonymous)],
      ready: [Function: ready],
      onClose: [Function (anonymous)],
      close: [Function (anonymous)],
      printPlugins: [Function: bound ],
      hasPlugin: [Function: hasPlugin],
      listen: [Function: listen],
      server: [Server],
      addresses: [Function: addresses],
      decorate: [Function: decorateFastify],
      hasDecorator: [Function: checkExistence],
      decorateReply: [Function: decorateReply],
      decorateRequest: [Function: decorateRequest],
      hasRequestDecorator: [Function: checkRequestExistence],      hasReplyDecorator: [Function: checkReplyExistence],    
      inject: [Function: inject],
      printRoutes: [Function: printRoutes],
      setNotFoundHandler: [Function: setNotFoundHandler],    
      setErrorHandler: [Function: setErrorHandler],
      setChildLoggerFactory: [Function: setChildLoggerFactory],
      initialConfig: [Object],
      addConstraintStrategy: [Function: bound addConstraintStrategy],
      hasConstraintStrategy: [Function: bound hasConstraintStrategy],
      mysql: [Object],
      [Symbol(fastify.state)]: [Object],
      [Symbol(fastify.keepAliveConnections)]: [Object],      
      [Symbol(fastify.options)]: [Object],
      [Symbol(fastify.children)]: [],
      [Symbol(fastify.serverBindings)]: [Array],
      [Symbol(fastify.bodyLimit)]: 1048576,
      [Symbol(fastify.routePrefix)]: '',
      [Symbol(fastify.logLevel)]: '',
      [Symbol(fastify.logSerializers)]: null,
      [Symbol(fastify.hooks)]: [Hooks <Complex prototype>],  
      [Symbol(fastify.schemaController)]: [SchemaController],      [Symbol(fastify.schemaErrorFormatter)]: null,
      [Symbol(fastify.errorHandler)]: [Object],
      [Symbol(fastify.childLoggerFactory)]: [Function: defaultChildLoggerFactory],
      [Symbol(fastify.replySerializerDefault)]: null,        
      [Symbol(fastify.contentTypeParser)]: [ContentTypeParser],
      [Symbol(fastify.Reply)]: [Function],
      [Symbol(fastify.Request)]: [Function],
      [Symbol(fastify.404)]: [Object],
      [Symbol(registered-plugin)]: [Array],
      [Symbol(fastify.pluginNameChain)]: [Array],
      [Symbol(fastify.avvioBoot)]: [Function (anonymous)],   
      [Symbol(kAvvio)]: true,
      [Symbol(fastify.canSetNotFoundHandler)]: true,
      [Symbol(fastify.404ContextKey)]: [Context],
      [Symbol(fastify.404LogLevelInstance)]: [Circular *1]   
    },
    preParsing: null,
    preValidation: null,
    [Symbol(fastify.404ContextKey)]: {
      schema: undefined,
      handler: [Function: basic404],
      Reply: [Function],
      Request: [Function],
      contentTypeParser: [ContentTypeParser],
      onRequest: null,
      onSend: null,
      onError: null,
      onTimeout: null,
      preHandler: null,
      onResponse: null,
      preSerialization: null,
      onRequestAbort: null,
      config: {},
      errorHandler: [Object],
      requestIdLogLabel: 'reqId',
      childLoggerFactory: [Function: defaultChildLoggerFactory],
      _middie: null,
      _parserOptions: [Object],
      exposeHeadRoute: undefined,
      prefixTrailingSlash: undefined,
      logLevel: '',
      logSerializers: undefined,
      attachValidation: undefined,
      schemaErrorFormatter: [Function: defaultSchemaErrorFormatter],
      validatorCompiler: null,
      serializerCompiler: null,
      server: [Object],
      preParsing: null,
      preValidation: null,
      [Symbol(fastify.404ContextKey)]: null,
      [Symbol(fastify.replySerializerDefault)]: undefined,   
      [Symbol(fastify.routeByFastify)]: undefined,
      [Symbol(fastify.request.cache.validateFns)]: null,     
      [Symbol(fastify.reply.cache.serializeFns)]: null,      
      [Symbol(fastify.routeOptions)]: [Object: null prototype]
    },
    [Symbol(fastify.replySerializerDefault)]: null,
    [Symbol(fastify.routeByFastify)]: false,
    [Symbol(fastify.request.cache.validateFns)]: null,       
    [Symbol(fastify.reply.cache.serializeFns)]: null,        
    [Symbol(fastify.routeOptions)]: [Object: null prototype] 
{ schema: [Getter], config: [Getter] }
  },
  [Symbol(fastify.RequestPayloadStream)]: IncomingMessage {  
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 
},
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      constructed: true,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: [StringDecoder],
      encoding: 'utf8',
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],       
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 79,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 122953,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 220,
        [Symbol(triggerId)]: 217
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Content-Type',
      'application/json',
      'User-Agent',
      'PostmanRuntime/7.32.3',
      'Accept',
      '*/*',
      'Postman-Token',
      '65c7b9ef-ffcf-4fb2-953d-dd46e060604d',
      'Host',
      'localhost:3000',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Connection',
      'keep-alive',
      'Content-Length',
      '88'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: undefined,
    aborted: false,
    upgrade: false,
    url: '/api/posts',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],       
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 79,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 122953,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 220,
        [Symbol(triggerId)]: 217
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: true,
    _dumped: false,
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      'content-type': 'application/json',
      'user-agent': 'PostmanRuntime/7.32.3',
      accept: '*/*',
      'postman-token': '65c7b9ef-ffcf-4fb2-953d-dd46e060604d',
      host: 'localhost:3000',
      'accept-encoding': 'gzip, deflate, br',
      connection: 'keep-alive',
      'content-length': '88'
    },
    [Symbol(kHeadersCount)]: 16,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0
  }
}